PROCEDURE "TravelApp.TravelDB::TripRoutingSPW" (IN weight VARCHAR(10), IN airportCodeOrigin NVARCHAR(3), IN airportCodeDestination NVARCHAR(3), OUT totalSegments BigInt, OUT totalDistance Int, OUT totalDuration Int, OUT routing "TravelApp.TravelDB::Tables.TripRoutingTT")
   LANGUAGE GRAPH
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   READS SQL DATA AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
	Graph g = Graph("TravelApp.TravelDB::Flights");
	Vertex sourceVertex = Vertex(:g, :airportCodeOrigin);
	Vertex targetVertex = Vertex(:g, :airportCodeDestination);
	IF (:weight == 'distance') {
		WeightedPath<Int> p = SHORTEST_PATH(:g, :sourceVertex, :targetVertex, (Edge e) => Int {return :e."distance";});
		totalSegments = Length(:p);
		totalDistance = Weight(:p);
		FOREACH e IN Edges(:p) {
			totalDuration = :totalDuration + :e."duration";
		}	
		routing = SELECT :segment, :e."airportCodeOrigin",  :e."airportCodeDestination", :e."airlineName", :e."distance", :e."duration" FOREACH e in Edges(:p) WITH ORDINALITY AS segment;
	} ELSE {
		IF (:weight == 'duration') {
			WeightedPath<Int> p = SHORTEST_PATH(:g, :sourceVertex, :targetVertex, (Edge e) => Int {return :e."duration";});
			totalSegments = Length(:p);
			totalDuration = Weight(:p);
			FOREACH e IN Edges(:p) {
				totalDistance = :totalDistance + :e."distance";
			}
			routing = SELECT :segment, :e."airportCodeOrigin",  :e."airportCodeDestination", :e."airlineName", :e."distance", :e."duration" FOREACH e in Edges(:p) WITH ORDINALITY AS segment;
		} ELSE {
			WeightedPath<BigInt> p = SHORTEST_PATH(:g, :sourceVertex, :targetVertex);
			totalSegments = Length(:p);
			FOREACH e IN Edges(:p) {
				totalDistance = :totalDistance + :e."distance";
				totalDuration = :totalDuration + :e."duration";
			}
			routing = SELECT :segment, :e."airportCodeOrigin",  :e."airportCodeDestination", :e."airlineName", :e."distance", :e."duration" FOREACH e in Edges(:p) WITH ORDINALITY AS segment;
		}
	}
END